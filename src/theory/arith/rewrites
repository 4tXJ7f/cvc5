; Basic rules
(define-rule arith-eq-refl-int ((t Int)) (= t t) true)
(define-rule arith-eq-symm-int ((t Int) (s Int)) (= t s) (= s t))

(define-rule arith-eq-refl-real ((t Real)) (= t t) true)
(define-rule arith-eq-symm-real ((t Real) (s Real)) (= t s) (= s t))

(define-rule arith-mul-one ((t Int)) (* 1 t) t)
; Test for unary minus
(define-rule arith-neg-neg ((t Int)) (- (- t)) t)

; Eliminations
(define-rule arith-elim-minus ((t Int) (s Int)) (- t s) (+ t (* (- 1) s)))
(define-rule arith-elim-gt ((t Int) (s Int)) (> t s) (not (<= t s)))
(define-rule arith-elim-lt ((t Int) (s Int)) (< t s) (not (>= t s)))
(define-rule arith-elim-leq ((t Int) (s Int)) (<= t s) (not (>= t (+ s 1))))



(define-rule arith-refl-leq ((t Int)) (<= t t) true)
(define-rule arith-refl-lt ((t Int)) (< t t) false)
(define-rule arith-refl-geq ((t Int)) (>= t t) true)
(define-rule arith-refl-gt ((t Int)) (> t t) false)

(define-rule* plus-flatten ((xs Int :list) (s Int) (ys Int :list) (zs Int :list))
  (+ xs (+ s ys) zs)
  (+ xs s ys zs))
