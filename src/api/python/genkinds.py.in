#!/usr/bin/env python
###############################################################################
# Top contributors (to current version):
#   Makai Mann, Mudathir Mohamed, Aina Niemetz
#
# This file is part of the cvc5 project.
#
# Copyright (c) 2009-2021 by the authors listed in the file AUTHORS
# in the top-level source directory and their institutional affiliations.
# All rights reserved.  See the file COPYING in the top-level source
# directory for licensing information.
# #############################################################################
##

"""
This script reads cvc5/src/api/cpp/cvc5_kind.h and generates
.pxd and .pxi files which declare all the cvc5 kinds and
implement a Python wrapper for kinds, respectively. The
default names are kinds.pxd / kinds.pxi, but the name is
configurable from the command line with --kinds-file-prefix.

The script is aware of the '#if 0' pattern and will ignore
kinds declared between '#if 0' and '#endif'. It can also
handle nested '#if 0' pairs.
"""

import argparse
import os
import sys

# get access to cvc5/src/api/parsekinds.py
SOURCE_DIR='${CMAKE_SOURCE_DIR}/src'
sys.path.insert(0, os.path.abspath(f'{SOURCE_DIR}/api'))

from parseenums import *

#################### Default Filenames ################
DEFAULT_PREFIX = 'kinds'

################ Comments and Macro Tokens ############
PYCOMMENT           = '#'

ENUMS_PXD_TOP_TEMPLATE = \
r"""cdef extern from "{header}" namespace "cvc5::api":
    enum {enum}:
"""

ENUMS_CLASS_VALUE_TEMPLATE = \
r"""       {value} 'cvc5::api::{enum}::{value}',
"""

ENUMS_PXI_TOP = \
r'''# distutils: language = c++
# distutils: extra_compile_args = -std=c++11

from {basename} cimport {enum} as c_{enum}
from enum import Enum

class {enum}(Enum):
    """The {enum} enum"""
    def __new__(cls, value, doc):
        self = object.__new__(cls)
        self._value_ = value
        self.__doc__ = doc
        return self
'''

ENUMS_ATTR_TEMPLATE = r'''    {name}=c_{enum}.{value}, """{doc}"""
'''

def gen_pxd(parser: EnumParser, file_prefix, header):
    with open(file_prefix + ".pxd", "w") as f:
        for enum in parser.enums:
            # include the format_name docstring in the generated file
            # could be helpful for users to see the formatting rules
            for line in parser.format_name.__doc__.split(NL):
                f.write(PYCOMMENT)
                if not line.isspace():
                    f.write(line)
                f.write(NL)
            f.write(ENUMS_PXD_TOP_TEMPLATE.format(header=header[len(SOURCE_DIR) + 1:], enum=enum.name))
            for value in enum.values:
                if enum.is_class:
                    f.write(ENUMS_CLASS_VALUE_TEMPLATE.format(value=value, enum=enum.name))
                else:
                    f.write("       {},\n".format(value))

def gen_pxi(parser : EnumParser, file_prefix):
    basename = file_prefix[file_prefix.rfind("/") + 1:]
    with open(file_prefix + ".pxi", "w") as f:
        for enum in parser.enums:
            f.write(ENUMS_PXI_TOP.format(basename=basename, enum=enum.name))
            for value, name in enum.values.items():
                doc = enum.values_doc.get(name, '')
                f.write(ENUMS_ATTR_TEMPLATE.format(name=name, enum=enum.name, value=value, doc=doc))

if __name__ == "__main__":
    parser = argparse.ArgumentParser('Read a kinds header file and generate a '
                         'corresponding pxd file, with simplified kind names.')
    parser.add_argument('--kinds-header', metavar='<KINDS_HEADER>',
                        help='The header file to read kinds from')
    parser.add_argument('--kinds-file-prefix', metavar='<KIND_FILE_PREFIX>',
                        help='The prefix for the .pxd and .pxi files to write '
                        'the Cython declarations to.',
                        default=DEFAULT_PREFIX)

    args               = parser.parse_args()
    kinds_header       = args.kinds_header
    kinds_file_prefix  = args.kinds_file_prefix

    kp = EnumParser()
    kp.parse(kinds_header)

    gen_pxd(kp, kinds_file_prefix, kinds_header)
    gen_pxi(kp, kinds_file_prefix)
