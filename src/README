To understand the new proof infrastructre:

PfRule <=> Kind
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_rule.h
ProofNode <=> Node
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_node.h
ProofRuleChecker <=> custom theory type checker
ProofChecker <=> TypeChecker
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_checker.h
ProofNodeManager <=> NodeManager
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_node_manager.h
CDProof
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof.h

ProofGenerator
EagerProofGenerator
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/proof_generator.h

// Must know what EqualityEngine is beyond here

ProofEqEngine <=> EqualityEngine
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/uf/proof_equality_engine.h

TrustNode
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/trust_node.h

// Must know what OutputChannel is beyond here

ProofOutputChannel <=> OutputChannel
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/proof_output_channel.h


SkolemManager
https://github.com/ajreynol/CVC4/blob/stringsPf/src/expr/proof_skolem_cache.h


// Specific checkers and proof_kinds

https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/builtin/proof_checker.h
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/builtin/proof_kinds

https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/booleans/proof_checker.h
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/booleans/proof_kinds

https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/uf/proof_checker.h
https://github.com/ajreynol/CVC4/blob/stringsPf/src/theory/uf/proof_kinds



High level changes needed:

- TheoryEngine passes a ProofOutputChannel to each Theory instead of an OutputChannel when in proof producing mode. It uses this object to extract proofs for theory lemmas when needed.
- TheoryEngine owns a ProofChecker that can check any kind of proof in proof_kinds files.
- Based on proof_kinds, we auto-generate:
(1) The PfRule enumeration,
(2) Printing for PfRule,
(3) Initialization of the ProofChecker owned by TheoryEngine,
(4) The code for checking (?)

Notes:
- Theory does not need to be concerned what a ProofNode is. It manages TrustNode objects but doesnt care about their contents.
- Similar to above, the user of a ProofEqEngine does not care about what a ProofNode is. Its input interface is similar to EqualityEngine, i.e. Node, its output interface is in terms of TrustNode.
- Theory can have as many ProofGenerator objects as it wants. It should have one for each kind of reasoning it does.
- ProofNodeManager does not need to be global.

PR finished:

(1) Add ProofNode printing as dag via SExpr
(2) Strings solver state minor update
(3) string rewrite for re inclusion
(4) SkolemManager (previously ProofSkolemCache)
(5) ProofChecker improve tracing, features
(7) strings SkolemCache uses SkolemManager (req 4)
(9) Proof step buffer (req 5)

PRs ready:

(6) Equality engine updates (Haniel)
(8) regexp operation (req 7)
(10) Update CDProof (req 9)
(14) Builtin rules, builtin checker (req 5) *
(15) Boolean rules, boolean checker (Haniel) (req 5)
(16) UF rules, UF checker (Haniel) (req 5)
(21) static strings preprocess reduce (req 7) *
(28) ProofSkolemCache -> SkolemManager

PRs future:

(11) ProofGenerator (req 10)
(12) Add TrustNode (req 11)
(13) Add EagerProofGenerator (req 11)
(17) rewriter new infrastructure "rewriteEqualityExt"
(18) Add LazyCDProof (req 11)
(19) Split EngineOutputChannel from TheoryEngine to its own file (req 12)
(20) Eq proof conversion (req 6)
(22) String rules, string checker (req 5, 17)
(23) ProofEqEngine (req 10, 18)
(24) SharedTermDatabase uses pfee (req 23)
(25) CongruenceManager uses pfee (req 23)
(26) strings infer info update "noExplain", all calls to InferenceManager
(27) strings InferProofCons (req 1, 3, 18, 26)
(29) Arithmetic proof checker (Alex)
(30) Arithmetic operator elimination (req 28, 29)
(31) update strings inference manager to use ProofEqEngine (req 23, 26)


- ProofNode update (refactor free assumptions via visitor?)
- Rewriter proof producing (Andres)
- Strings term registry update
- Strings core solver update
- TheoryEngine proof checker initialize all theories
- TheoryEngine explanation proof producing

PRs wish list:

- SEXPR simply typed?
- Proof kinds infrastructure???
